library(pacman)
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframe
tidymodels, # ML modelos
yardstick, # Matriz de Confusión
ggplot2, # Graficas
naivebayes, # modelo bayes
discrim, # modelos lda y qda
kknn) # nearest neighbor
db <- read_csv("https://raw.githubusercontent.com/ignaciomsarmiento/datasets/main/houses_sf_ny.csv",skip = 2)
glimpse(db)
db <- db %>%
mutate(ciudad=factor(in_sf,levels=c(0,1),labels=c("NY","San Francisco"))) %>%
select(-in_sf)
set.seed(123)
split_data <- initial_split(db, prop = 0.75)
train_data <- training(split_data)
test_data  <- testing(split_data)
rec <- recipe(ciudad ~ ., data = train_data) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
metrics <- metric_set(accuracy, recall, precision, f_meas)
lda_model <- discrim_linear() %>% ##Creación de modelo
set_engine("MASS") %>% ##Modulo
set_mode("classification") ##El modo, puede ser reg o clasificacion hasta el momento
workflow_lda <- workflow() %>%
add_recipe(rec) %>%
add_model(lda_model)
lda_fit <- workflow_lda %>%
fit(data = train_data)
test_data <- test_data %>%
mutate(predicciones_lda  = predict(lda_fit, test_data)$.pred_class
conf_mat(test_data, truth = ciudad, estimate = predicciones_lda)
test_data <- test_data %>%
mutate(predicciones_lda  = predict(lda_fit, test_data)$.pred_class)
conf_mat(test_data, truth = ciudad, estimate = predicciones_lda)
test_data
metrics(test_data, truth = ciudad, estimate =  predicciones_lda)
probs_lda <- predict(lda_fit, test_data, type = "prob")
test_data <- test_data %>%
mutate(probas_lda  = predict(lda_fit, test_data,  type = "prob")$`.pred_NY`)
autoplot(roc_curve(data = test_data, truth = ciudad, probas_lda))
# AUC para LDA
roc_auc(data = test_data, truth = ciudad, probas_lda)
modelo_qda <- discrim_quad() %>%
set_engine("MASS")%>%
set_mode("classification")
# Crear workflow
workflow_qda <- workflow() %>%
add_recipe(rec) %>%
add_model(modelo_qda)
qda_fit <- workflow_qda %>%
fit(data = train_data)
test_data <- test_data %>%
mutate(predicciones_qda  = predict(qda_fit, test_data)$.pred_class)
conf_mat(test_data, truth = ciudad, estimate = predicciones_qda)
metrics(test_data, truth = ciudad, estimate =  predicciones_qda)
test_data <- test_data %>%
mutate(probas_qda  = predict(qda_fit, test_data,  type = "prob")$`.pred_NY`)
autoplot(roc_curve(data = test_data, truth = ciudad, probas_qda))
autoplot(roc_curve(data = test_data, truth = ciudad, probas_qda))
# AUC para QDA
roc_auc(data = test_data, truth = ciudad, probas_qda)
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
tidymodels) # Modelado de datos limpios y ordenados
setwd("d:/Javier/Desktop/UNIANDES/Big Data/Taller-3/stores/Bases de datos - Versión 3")
df_train_hogares<- read.csv("train_hogares_3.csv")
View(df_train_hogares)
df_train_hogares <- df_train_hogares %>%
mutate(personasxhab = Nper/cuartosHab)
hist(df_train_hogares$personasxhab, main="Histograma del personas por habitación", xlab="Personas x habitación para dormir",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_train_hogares <- df_train_hogares %>%
mutate(ingresoxper = Ingtotug/Nper)
hist(df_train_hogares$ingresoxper, main="Histograma de ingreso por persona", xlab="Ingreso x persona",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_train_personas <- read.csv("train_personas_3.csv")
df_train_personas <- read.csv("train_personas_3.csv")
df_train_hogares$sexo_jefe_hogar <- NA
View(df_train_personas)
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en df_individuos
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en df_hogares
df_train_hogares$sexo_jefe_hogar[i] <- info_jefe_hogar$sexo[info_jefe_hogar$JefeHogar == 1]
}
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en df_individuos
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en df_hogares
df_train_hogares$sexo_jefe_hogar[i] <- info_jefe_hogar$Sexo[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares <- df_train_hogares %>%
mutate(jefe_mujer = if_else(sexo_jefe_hogar = 2, "si", "no"))
df_train_hogares <- df_train_hogares %>%
mutate(jefe_mujer = if_else(sexo_jefe_hogar == 2, "si", "no"))
df_train_hogares$edad_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$edad_jefe_hogar[i] <- info_jefe_hogar$Edad[info_jefe_hogar$JefeHogar == 1]
}
hist(df_train_hogares$edad_jefe_hogar, main="Histograma de edad jefe de hogar", xlab="Edad jefe",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_train_hogares$menores_edad <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
menores_edad_en_hogar <- sum(personas_en_hogar$Edad < 18)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_train_hogares$menores_edad[i] <- menores_edad_en_hogar
}
df_train_hogares$educacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$educacion_jefe_hogar[i] <- info_jefe_hogar$relab[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares$ocupacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$ocupacion_jefe_hogar[i] <- info_jefe_hogar$relab[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares$educacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$educacion_jefe_hogar[i] <- info_jefe_hogar$maxEducLevel[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad_en_hogar)/Nper)*100)
df_train_hogares$ocupados <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_train_hogares$ocupados[i] <- ocupados_hogar
}
View(df_train_hogares)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ((Nper-menores_edad_en_hogar)-ocupados)/(Nper-menores_edad_en_hogar)*100)
df_train_hogares$maxEducLevel_hogar <- 0
or (i in 1:nrow(df_train_hogares)) {
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Encontrar el máximo nivel educativo en el hogar
max_educ_hogar <- max(personas_en_hogar$maxEducLevel)
# Actualizar la columna en df_train_hogares con el máximo nivel educativo
df_train_hogares$maxEducLevel_hogar[i] <- max_educ_hogar
}
save(df_test_hogares,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
save(df_train_hogares,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4_1.Rda")
library (pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret, # Classification And REgression Training
psych,
modelsummary,
stargazer,
foreach,
ggplot2)
p_load("GGally","psych","rpart.plot","ROCR","gamlr","modelsummary","gtsummary","naniar","PerformanceAnalytics","pastecs",
"writexl","dplyr","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer",
"readr","AER","MLmetrics","smotefamily","pROC","smotefamily","rpart","randomForest","rpart", "Metrics",
"rattle")
setwd("d:/Javier/Desktop/UNIANDES/Big Data/Taller-3/stores/Bases de datos - Versión 4")
load("train_hogares_4_1.Rda")
load("test_hogares_4_1.Rda")
