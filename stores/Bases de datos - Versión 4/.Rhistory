install.packages("pacman")
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
tidymodels) # Modelado de datos limpios y ordenados
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
load("train_hogares_4.Rda")
load("train_hogares_4_1.Rda")
load("train_hogares_4.Rda")
load("train_hogares_4_1.Rda")
View(df_train_hogares)
View(df_train_hogares)
load("train_hogares_4_1.Rda")
View(df_train_hogares)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ifelse(porcentaje_edad_trabajo < 0, 0, porcentaje_edad_trabajo))
summary(df_train_hogares$porcentaje_edad_trabajo)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados < 0, 0, porcentaje_ocupados))
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ifelse(porcentaje_edad_trabajo <= 0, 1, porcentaje_edad_trabajo))
summary(df_train_hogares$porcentaje_edad_trabajo)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ifelse(porcentaje_edad_trabajo <= 0, (100/Nper), porcentaje_edad_trabajo))
summary(df_train_hogares$porcentaje_edad_trabajo)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ifelse(porcentaje_edad_trabajo <= 1, (100/Nper), porcentaje_edad_trabajo))
summary(df_train_hogares$porcentaje_edad_trabajo)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ((Nper-menores_edad_en_hogar)-ocupados)/(Nper-menores_edad_en_hogar)*100)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = (ocupados)/(Nper-menores_edad_en_hogar)*100)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = (ocupados)/(Nper-menores_edad)*100)
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados < 0, 0, porcentaje_ocupados))
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados == -Inf, 0, porcentaje_ocupados))
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados == Inf, 0, porcentaje_ocupados))
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares$porcentaje_ocupados <- ifelse(is.na(df_train_hogares$porcentaje_ocupados), 0, df_train_hogares$porcentaje_ocupados)
summary(df_train_hogares$porcentaje_ocupados)
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados >100, 100, porcentaje_ocupados))
summary(df_train_hogares$porcentaje_ocupados)
save(df_train_hogares,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4_1.Rda")
save(df_train_hogares,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4_1.Rda")
save(df_train_hogares,file = "C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4_1.Rda")
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
load("test_hogares_4.Rda")
load("test_hogares_4_.Rda")
load("test_hogares_4_1.Rda")
load("test_hogares_4.Rda")
load("test_hogares_4_1.Rda")
df_test_hogares_1<- df_test_hogares
save(df_test_hogares_1,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
save(df_test_hogares_1,file = "C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
load("test_hogares_4.Rda")
View(df_test_hogares_1)
View(df_test_hogares)
df_test_hogares_1<- df_test_hogares_1 %>%
select(id, porcentaje_ocupados,maxEducLevel_hogar)
View(df_test_hogares_1)
df_test_hogares <- merge(df_test_hogares, df_test_hogares_1, by = "id", all.x = TRUE)
df_test_hogares_2 <- merge(df_test_hogares, df_test_hogares_1, by = "id", all.x = TRUE)
View(df_test_hogares_2)
df_test_hogares_2 <- merge(df_test_hogares, df_test_hogares_1, by = "id", all.x = FALSE)
df_test_hogares_2 <- select(df_test_hogares_2, -c(porcentaje_ocupados.y, maxEducLevel_hogar.y))
df_test_hogares_2 <- df_test_hogares_2 %>%
rename(porcentaje_ocupados = porcentaje_ocupados.x, maxEducLevel_hogar = maxEducLevel_hogar.x)
df_test_hogares <- df_test_hogares %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad)/Nper)*100)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad)/Nper)*100)
summary(df_test_hogares_2$porcentaje_ocupados)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_ocupados = (ocupados)/(Nper-menores_edad)*100)
summary(df_test_hogares_2$porcentaje_ocupados)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad)/Nper)*100)
df_test_hogares$ocupados <- 0
df_test_hogares_2$ocupados <- 0
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 3")
df_test_personas <- read.csv("test_personas_3.csv")
for (i in 1:nrow(df_test_hogares_2)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_test_hogares_2$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_test_personas[df_test_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_test_hogares_2$ocupados[i] <- ocupados_hogar
}
View(df_test_personas)
View(df_test_personas)
View(df_test_personas)
View(df_test_personas)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_ocupados = (ocupados)/(Nper-menores_edad)*100)
summary(df_test_hogares_2$porcentaje_edad_trabajo)
summary(df_test_hogares_2$porcentaje_ocupados)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados == Inf, (100/Nper), porcentaje_ocupados))
summary(df_test_hogares_2$porcentaje_ocupados)
df_test_hogares_2$porcentaje_ocupados <- ifelse(is.na(df_test_hogares_2$porcentaje_ocupados), 0, df_test_hogares_2$porcentaje_ocupados)
summary(df_test_hogares_2$porcentaje_ocupados)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate(porcentaje_ocupados = ifelse(porcentaje_ocupados >100, 100, porcentaje_ocupados))
summary(df_test_hogares_2$porcentaje_ocupados)
save(df_test_hogares_2,file = "C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
View(df_test_hogares_2)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret, # Classification And REgression Training
psych,
modelsummary,
stargazer,
foreach,
ggplot2)
p_load("GGally","psych","rpart.plot","ROCR","gamlr","modelsummary","gtsummary","naniar","PerformanceAnalytics","pastecs",
"writexl","dplyr","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer",
"readr","AER","MLmetrics","smotefamily","pROC","smotefamily","rpart","randomForest","rpart", "Metrics",
"rattle")
set.seed(4865)
p_load(caret)
load("train_hogares_4_1.Rda")
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
load("train_hogares_4_1.Rda")
load("test_hogares_4_1.Rda")
View(df_train_hogares)
train_hogares <- df_train_hogares  %>% mutate(sample = "train")
View(train_hogares)
load("~/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
summary(df_train_hogares$Pobre)
tabla_frecuencia <- table(df_train_hogares$Pobre)
porcentaje_Pobre <- prop.table(tabla_frecuencia) * 100
print(tabla_frecuencia)
print(porcentaje_Pobre)
df_train_hogares$Pobre <- factor(df_train_hogares$Pobre,levels = c(0,1),
labels=c("no","si"))
levels(df_train_hogares$Pobre$Pobre)
levels(df_train_hogares$Pobre)
split1 <-createDataPartition(df_train_hogares$Pobre,p=0.7)[[1]]
length(split1)
training <- df_train_hogares[split1,]
other <- df_train_hogares[-split1,]
split2 <- createDataPartition(other$Pobre,p=1/3)[[1]]
evaluation <- other[split2,]
testing <- other[-split2,]
dim(training)
dim(testing)
dim(evaluation)
prop.table(table(df_train_hogares$Pobre))
prop.table(table(training$Pobre))
prop.table(table(testing$Pobre))
prop.table(table(evaluation$Pobre))
predict <- stats::predict
load("train_hogares_4_1.Rda")
load("test_hogares_4_1.Rda")
df_train_hogares$personasxhab<-as.double(df_train_hogares$personasxhab)
df_train_hogares$Nper<-as.double(df_train_hogares$Nper)
df_train_hogares$edad_jefe_hogar<-as.double(df_train_hogares$edad_jefe_hogar)
df_train_hogares$porcentaje_ocupados<-as.double(df_train_hogares$porcentaje_ocupado)
df_train_hogares$menores_edad<-as.double(df_train_hogares$menores_edad)
df_test_hogares_2$personasxhab<-as.double(df_test_hogares_2$personasxhab)
df_test_hogares_2$Nper<-as.double(df_test_hogares_2$Nper)
df_test_hogares_2$edad_jefe_hogar<-as.double(df_test_hogares_2$edad_jefe_hogar)
df_test_hogares_2$porcentaje_ocupados<-as.double(df_test_hogares_2s$porcentaje_ocupado)
View(df_test_hogares_2)
df_test_hogares_2$personasxhab<-as.double(df_test_hogares_2$personasxhab)
df_test_hogares_2$Nper<-as.double(df_test_hogares_2$Nper)
df_test_hogares_2$edad_jefe_hogar<-as.double(df_test_hogares_2$edad_jefe_hogar)
df_test_hogares_2$porcentaje_ocupados<-as.double(df_test_hogares_2$porcentaje_ocupado)
df_test_hogares_2$menores_edad<-as.double(df_test_hogares_2$menores_edad)
variables_categoricas <- c("dominio",
"Propiedad",
"jefe_mujer",
"maxEducLevel_hogar",
"ocupacion_jefe_hogar")
df_train_hogares <- df_train_hogares %>%
mutate_at(variables_categoricas, as.factor)
variables_categoricas <- c("Dominio",
"Propiedad",
"jefe_mujer",
"maxEducLevel_hogar",
"ocupacion_jefe_hogar")
df_train_hogares <- df_train_hogares %>%
mutate_at(variables_categoricas, as.factor)
df_test_hogares_2 <- df_test_hogares_2 %>%
mutate_at(variables_categoricas, as.factor)
set.seed(4865)
p_load(caret)
summary(df_train_hogares$Pobre)
tabla_frecuencia <- table(df_train_hogares$Pobre)
porcentaje_Pobre <- prop.table(tabla_frecuencia) * 100
print(tabla_frecuencia)
print(porcentaje_Pobre)
df_train_hogares$Pobre <- factor(df_train_hogares$Pobre,levels = c(0,1),
labels=c("no","si"))
split1 <-createDataPartition(df_train_hogares$Pobre,p=0.7)[[1]]
split1 <-createDataPartition(df_train_hogares$Pobre,p=0.7)[[1]]
length(split1)
training <- df_train_hogares[split1,]
other <- df_train_hogares[-split1,]
split2 <- createDataPartition(other$Pobre,p=1/3)[[1]]
evaluation <- other[split2,]
testing <- other[-split2,]
dim(training)
dim(testing)
dim(evaluation)
prop.table(table(df_train_hogares$Pobre))
prop.table(table(training$Pobre))
prop.table(table(testing$Pobre))
prop.table(table(evaluation$Pobre))
predict <- stats::predict
modelo <- as.formula("Pobre ~ Dominio + personasxhab + Propiedad + Nper + jefe_mujer + edad_jefe_hogar+maxEducLevel_hogar+ocupacion_jefe_hogar+porcentaje_ocupados+menores_edad")
ffcv<-function(...)c(twoClassSummary(...), defaultSummary(...))
Control <- trainControl(method = "cv",
number = 5,
summaryFunction = ffcv,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
logitM1 <- train(
M1,
data = training,
method = "glm",
trControl = Control,
family = "binomial",
preProcess = c("center", "scale")
)
logitM1 <- train(
modelo,
data = training,
method = "glm",
trControl = Control,
family = "binomial",
preProcess = c("center", "scale")
)
logitM1
stargazer(logitM1,type="text")
testR$logitM1 <- predict(logitM1,
newdata = testing,
type= "prob")[,1]
testR <- data.frame(Pobre=testing$Pobre)
testR$logitM1 <- predict(logitM1,
newdata = testing,
type= "prob")[,1]
testR
testR <- testR %>%
mutate(
logitM1=ifelse(logitM1>0.5,"si","no")
)
with(testR,table(Pobre,logitM1))
coeficientes <- coef(logitM1$finalModel,c(logitM1$finalModel$lambdaOpt,
logitM1$finalModel$a0)) %>%
as.matrix() %>%
as.tibble(rownames="predictor") %>%
rename(coeficiente=s0)
View(logitM1)
logitM1
coeficientes <- coef(logitM1$finalModel,c(logitM1$finalModel$lambdaOpt,logitM1$finalModel$a0)) %>%
as.matrix() %>%
as.tibble(rownames="predictor") %>%
rename(coeficiente=s0)
coeficientes <- coef(logitM1$finalModel,c(logitM1$finalModel$lambdaOpt,
logitM1$finalModel$a0)) %>%
as.matrix() %>%
as.tibble(rownames="predictor") %>%
rename(coeficiente=s0)
View(logitM1)
logitM1
coeficientes <- coef(logitM1$finalModel,c(logitM1$finalModel$lambdaOpt,
logitM1$finalModel$a0)) %>%
as.matrix() %>%
as.tibble(rownames="predictor") %>%
rename(coeficiente=s0)
data <- df_test_hogares_2
d_submit <- df_test_hogares_2
d_submit$predict <- predict(logitM1,d_submit,type = "prob")[,1]
submit <- d_submit %>%
mutate(Pobre=ifelse(predict>0.5,1,0)) %>%
select(id,Pobre)
prop.table(table(submit$Pobre))
write.csv(submit,file = "../stores/i1.csv",row.names = FALSE)
logitM1
coeficientes <- coef(logitM1$finalModel,c(logitM1$finalModel$lambdaOpt,
logitM1$finalModel$a0)) %>%
as.matrix() %>%
as.tibble(rownames="predictor") %>%
rename(coeficiente=s0)
