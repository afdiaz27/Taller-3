setwd("C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
df_test_hogares$ocupados <- 0
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
tidymodels) # Modelado de datos limpios y ordenados
setwd("C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4")
df_test_hogares<- read.csv("test_hogares_3.csv")
setwd("C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 3")
df_test_hogares<- read.csv("test_hogares_3.csv")
df_test_personas <- read.csv("test_personas_3.csv")
for (i in 1:nrow(df_test_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_test_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_test_personas[df_test_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_test_hogares$ocupados[i] <- ocupados_hogar
}
df_test_hogares <- df_test_hogares %>%
mutate(porcentaje_ocupados = ((Nper-menores_edad_en_hogar)-ocupados)/(Nper-menores_edad_en_hogar)*100)
df_test_hogares$menores_edad <- 0
for (i in 1:nrow(df_test_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_test_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_test_personas[df_test_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
menores_edad_en_hogar <- sum(personas_en_hogar$Edad < 18)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_test_hogares$menores_edad[i] <- menores_edad_en_hogar
}
df_test_hogares <- df_test_hogares %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad_en_hogar)/Nper)*100)
df_test_hogares$ocupados <- 0
for (i in 1:nrow(df_test_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_test_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_test_personas[df_test_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_test_hogares$ocupados[i] <- ocupados_hogar
}
df_test_hogares <- df_test_hogares %>%
mutate(porcentaje_ocupados = ((Nper-menores_edad_en_hogar)-ocupados)/(Nper-menores_edad_en_hogar)*100)
df_test_hogares$maxEducLevel_hogar <- 0
for (i in 1:nrow(df_test_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_test_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_test_personas[df_test_personas$id == id_hogar_actual, ]
# Encontrar el máximo nivel educativo en el hogar
max_educ_hogar <- max(personas_en_hogar$maxEducLevel)
# Actualizar la columna en df_train_hogares con el máximo nivel educativo
df_test_hogares$maxEducLevel_hogar[i] <- max_educ_hogar
}
save(df_test_hogares,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4_1.Rda")
