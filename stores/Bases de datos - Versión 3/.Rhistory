install.packages("pacman")
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
tidymodels) # Modelado de datos limpios y ordenados
setwd("C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 3")
df_train_hogares<- read.csv("train_hogares_3.csv")
df_train_hogares <- df_train_hogares %>%
mutate(personasxhab = Nper/cuartosHab)
hist(df_train_hogares$personasxhab, main="Histograma del personas por habitación", xlab="Personas x habitación para dormir",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_train_personas <- read.csv("train_personas_3.csv")
df_train_hogares$sexo_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$sexo_jefe_hogar[i] <- info_jefe_hogar$Sexo[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares <- df_train_hogares %>%
mutate(jefe_mujer = if_else(sexo_jefe_hogar == 2, "si", "no"))
df_train_hogares$edad_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$edad_jefe_hogar[i] <- info_jefe_hogar$Edad[info_jefe_hogar$JefeHogar == 1]
}
hist(df_train_hogares$edad_jefe_hogar, main="Histograma de edad jefe de hogar", xlab="Edad jefe",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_train_hogares$menores_edad <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
menores_edad_en_hogar <- sum(personas_en_hogar$Edad < 18)
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
menores_edad_en_hogar <- sum(personas_en_hogar$Edad < 18)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_train_hogares$menores_edad[i] <- menores_edad_en_hogar
}
df_train_hogares$ocupacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$ocupacion_jefe_hogar[i] <- info_jefe_hogar$relab[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares$educacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$educacion_jefe_hogar[i] <- info_jefe_hogar$maxEducLevel[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_edad_trabajo = ((Nper-menores_edad_en_hogar)/Nper)*100)
df_train_hogares$ocupados <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
ocupados_hogar <- sum(personas_en_hogar$Ocu == 1)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_train_hogares$ocupados[i] <- ocupados_hogar
}
df_train_hogares <- df_train_hogares %>%
mutate(porcentaje_ocupados = ((Nper-menores_edad_en_hogar)-ocupados)/(Nper-menores_edad_en_hogar)*100)
df_train_hogares$maxEducLevel_hogar <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Encontrar el máximo nivel educativo en el hogar
max_educ_hogar <- max(personas_en_hogar$maxEducLevel)
# Actualizar la columna en df_train_hogares con el máximo nivel educativo
df_train_hogares$maxEducLevel_hogar[i] <- max_educ_hogar
}
save(C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4.Rda")
save("C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4 / train_hogares_4.Rda")
View(df_train_hogares)
df_train_hogares$menores_edad <- 0
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar actual
id_hogar_actual <- df_train_hogares$id[i]
# Filtrar las personas que pertenecen al hogar actual en df_train_personas
personas_en_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Contar cuántas personas son menores de 18 años
menores_edad_en_hogar <- sum(personas_en_hogar$Edad < 18)
# Actualizar la columna en df_train_hogares con la cantidad de menores de edad
df_train_hogares$menores_edad[i] <- menores_edad_en_hogar
}
View(df_train_hogares)
View(df_train_hogares)
View(df_train_hogares)
df_train_hogares$ocupacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$ocupacion_jefe_hogar[i] <- info_jefe_hogar$relab[info_jefe_hogar$JefeHogar == 1]
}
df_train_hogares$educacion_jefe_hogar <- NA
for (i in 1:nrow(df_train_hogares)) {
# Obtener el ID del hogar
id_hogar_actual <- df_train_hogares$id[i]
# Obtener la información del jefe de hogar y su sexo en la base de personas
info_jefe_hogar <- df_train_personas[df_train_personas$id == id_hogar_actual, ]
# Actualizar el sexo del jefe de hogar en la base de hogares
df_train_hogares$educacion_jefe_hogar[i] <- info_jefe_hogar$maxEducLevel[info_jefe_hogar$JefeHogar == 1]
}
save(df_test_hogares,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/test_hogares_4.Rda")
save(df_train_hogares,file = "C:/Users/de.sandoval10/Documents/GitHub/Taller-3/stores/Bases de datos - Versión 4/train_hogares_4.Rda")
